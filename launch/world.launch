<launch>
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->  
  <arg name="kinova_robotType" default="j2s7s300"/>
  <arg name="kinova_robotName" default="$(arg kinova_robotType)"/>
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="use_trajectory_controller" default="false"/>
  <arg name="is7dof" default="true"/>
  <arg name="rqt" default="true"/>
  <arg name="has2finger" default="false"/>

  <arg name="description_name" default="robot_description"/> <!-- allows remapping of robot_description into a namespace -->

  <!-- Robot to table transformation parameters -->
  <arg name="robot_to_table_x" default="0.6"/>
  <arg name="robot_to_table_y" default="0.6"/>
  <arg name="robot_to_table_z" default="0.405"/>
  <arg name="robot_to_table_roll" default="0"/>
  <arg name="robot_to_table_pitch" default="0"/>
  <arg name="robot_to_table_yaw" default="0"/>

  <!-- Camera to table transformation parameters -->
  <arg name="camera_to_table_x" default="-0.6"/>
  <arg name="camera_to_table_y" default="0.6"/>
  <arg name="camera_to_table_z" default="0.8"/>
  <arg name="camera_to_table_roll" default="0"/>
  <arg name="camera_to_table_pitch" default="0"/>
  <arg name="camera_to_table_yaw" default="0.7"/>

<!-- Target to table transformation parameters -->
  <arg name="target_to_camera_x" default="0.6"/>
  <arg name="target_to_camera_y" default="-0.6"/>
  <arg name="target_to_camera_z" default="0.0"/>
  <arg name="target_to_camera_roll" default="0"/>
  <arg name="target_to_camera_pitch" default="0"/>
  <arg name="target_to_camera_yaw" default="0"/>

    <!-- Robot to table transformation parameters -->
  <param name="robot_to_table/x" value="$(arg robot_to_table_x)" />
  <param name="robot_to_table/y" value="$(arg robot_to_table_y)" />
  <param name="robot_to_table/z" value="$(arg robot_to_table_z)" />
  <param name="robot_to_table/roll" value="$(arg robot_to_table_roll)" />
  <param name="robot_to_table/pitch" value="$(arg robot_to_table_pitch)" />
  <param name="robot_to_table/yaw" value="$(arg robot_to_table_yaw)" />

  <!-- Camera to table transformation parameters -->
  <param name="camera_to_table/x" value="$(arg camera_to_table_x)" />
  <param name="camera_to_table/y" value="$(arg camera_to_table_y)" />
  <param name="camera_to_table/z" value="$(arg camera_to_table_z)" />
  <param name="camera_to_table/roll" value="$(arg camera_to_table_roll)" />
  <param name="camera_to_table/pitch" value="$(arg camera_to_table_pitch)" />
  <param name="camera_to_table/yaw" value="$(arg camera_to_table_yaw)" />

  <!-- Target to camera transformation parameters -->
  <param name="target_to_camera/x" value="$(arg target_to_camera_x)" />
  <param name="target_to_camera/y" value="$(arg target_to_camera_y)" />
  <param name="target_to_camera/z" value="$(arg target_to_camera_z)" />
  <param name="target_to_camera/roll" value="$(arg target_to_camera_roll)" />
  <param name="target_to_camera/pitch" value="$(arg target_to_camera_pitch)" />
  <param name="target_to_camera/yaw" value="$(arg target_to_camera_yaw)" />

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find sayens)/worlds/robot_world.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
  </include>

  <!-- Load the URDF into the ROS Parameter Server -->
 <param name="robot_description" command="$(find xacro)/xacro $(find sayens)/urdf/robot_setup.urdf.xacro 
 robot_to_table_x:=$(arg robot_to_table_x) 
 robot_to_table_y:=$(arg robot_to_table_y) 
 robot_to_table_z:=$(arg robot_to_table_z) 
 robot_to_table_roll:=$(arg robot_to_table_roll) 
 robot_to_table_pitch:=$(arg robot_to_table_pitch) 
 robot_to_table_yaw:=$(arg robot_to_table_yaw) 
 camera_to_table_x:=$(arg camera_to_table_x) 
 camera_to_table_y:=$(arg camera_to_table_y) 
 camera_to_table_z:=$(arg camera_to_table_z) 
 camera_to_table_roll:=$(arg camera_to_table_roll) 
 camera_to_table_pitch:=$(arg camera_to_table_pitch) 
 camera_to_table_yaw:=$(arg camera_to_table_yaw)
 target_to_camera_x:=$(arg target_to_camera_x) 
 target_to_camera_y:=$(arg target_to_camera_y) 
 target_to_camera_z:=$(arg target_to_camera_z) 
 target_to_camera_roll:=$(arg target_to_camera_roll) 
 target_to_camera_pitch:=$(arg target_to_camera_pitch) 
 target_to_camera_yaw:=$(arg target_to_camera_yaw)"/>

  
  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
    args="-urdf -model $(arg kinova_robotName) -param robot_description" />

  <!-- Load controllers -->
  <rosparam file="$(find kinova_control)/config/j2s7s300_control.yaml" command="load"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
        args="joint_state_controller 
              $(arg kinova_robotName)_arm_controller 
              $(arg kinova_robotName)_gripper_controller"/>

  <!-- ros_control launch file -->
  <include file="$(find kinova_control)/launch/kinova_control.launch">
    <arg name="kinova_robotName" value="$(arg kinova_robotName)"/>
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
    <arg name="use_trajectory_controller" value="$(arg use_trajectory_controller)"/>
    <arg name="is7dof" value="$(arg is7dof)"/>
    <arg name="has2finger" value="$(arg has2finger)"/>
    <arg name="description_name" value="$(arg description_name)"/>
  </include>

  <!-- rqt launch file -->
  <include if="$(arg rqt)" file="$(find kinova_control)/launch/kinova_rqt.launch">
    <arg name="kinova_robotType" value="$(arg kinova_robotType)"/>
  </include> 

  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find sayens)/rviz/robot_setup.rviz"/>

  <node name="service_launcher" pkg="sayens" type="service.sh" output="screen" />
  <node name="initial_launcher" pkg="sayens" type="initial.sh" output="screen" />

</launch>
